


CREATE TABLE DASH_ST_DATAMART
(
    ID NUMBER NOT NULL,
    JOB_START_DT TIMESTAMP(6),
    JOB_END_DT TIMESTAMP(6) NOT NULL,
    STEP_NAME VARCHAR2(100 BYTE) NOT NULL,
    JOB_DURE_TIME VARCHAR2(16 BYTE),
    JOB_DURE_TIME_MS NUMBER,
    ADDED_DATE DATE DEFAULT SYSDATE
)
NOLOGGING;

CREATE SEQUENCE DASH_ST_DATAMART_SEQ
MINVALUE 1
MAXVALUE 999999999999999999999999999
INCREMENT BY 1 CACHE 20 NOORDER NOCYCLE;


CREATE OR REPLACE TRIGGER DASH_ST_DATAMART_TRG
BEFORE INSERT OR UPDATE ON DASH_ST_DATAMART
FOR EACH ROW
    BEGIN
        IF INSERTING THEN
            IF :NEW.ID IS NULL THEN
                SELECT DASH_ST_DATAMART_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
            END IF;
        END IF;
    END;



    /*

insert into DASH_ST_DATAMART (JOB_START_DT, JOB_END_DT, STEP_NAME, JOB_DURE_TIME, JOB_DURE_TIME_MS)
SELECT JOB_START_DT JOBSTARTDT, JOB_END_DT JOBENDDT, STEPNAME, JOB_DURE_TIME,
((SUBSTR(JOB_DURE_TIME,1,2)*60+SUBSTR(JOB_DURE_TIME,4,2))*60+SUBSTR(JOB_DURE_TIME,7,2))*1000+SUBSTR(JOB_DURE_TIME,10,6) JOB_DURE_TIME_MS
  FROM
    (SELECT
      JL.JOBRUN_LOG_ID,JL.PROCNAME, JL.JOBNAME, JL.STEPNAME, JL.JOBSTATUS,
      TRUNC(JL.JOBRUN_DT) AS JOBRUN_DATE,
      JL.JOBRUN_DT AS JOB_END_DT,
      LAG(JL.JOBRUN_DT, 1) OVER (PARTITION BY JL.PROCNAME, JL.JOBNAME,JL.STEPNAME ORDER BY JL.JOBRUN_DT) AS JOB_START_DT,
      SUBSTR(TO_CHAR(JL.JOBRUN_DT - LAG(JL.JOBRUN_DT, 1) OVER (PARTITION BY JL.PROCNAME, JL.JOBNAME,JL.STEPNAME ORDER BY JL.JOBRUN_DT),'HH24:MI:SS'),12) AS JOB_DURE_TIME
    FROM  DMTCLMGR.JOBRUN_LOG JL
    WHERE TRUNC(JOBRUN_DT) >= TRUNC(SYSDATE) - 2)
  WHERE JOBSTATUS <> 'START'
    AND JOB_START_DT IS NOT NULL
    AND STEPNAME LIKE 'PROC%'
  GROUP BY JOBRUN_DATE,JOB_START_DT,JOB_END_DT,STEPNAME,JOB_DURE_TIME,DECODE(JOBSTATUS,'END',SUBSTR(JOB_DURE_TIME,1,11),'END WITH ERROR','END WITH ERROR')
  order by JOB_START_DT desc;

     */